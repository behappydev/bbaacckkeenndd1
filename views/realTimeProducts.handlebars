<!-- views/realTimeProducts.handlebars -->
<h1>Productos en Tiempo Real</h1>
<ul id="products-list">
    {{#each products}}
        <li data-id="{{this.id}}">
            <strong>{{this.title}}</strong> - {{this.description}} - ${{this.price}}
            <button class="modify-btn">Modificar</button>
            <button class="delete-btn">Eliminar</button>
            
            <!-- Formulario de edición -->
            <form class="edit-form">
                <input type="text" class="edit-title" placeholder="Título" value="{{this.title}}" required>
                <input type="text" class="edit-description" placeholder="Descripción" value="{{this.description}}" required>
                <input type="text" class="edit-code" placeholder="Código" value="{{this.code}}" required>
                <input type="number" class="edit-price" placeholder="Precio" value="{{this.price}}" required>
                <input type="number" class="edit-stock" placeholder="Stock" value="{{this.stock}}" required>
                <input type="text" class="edit-category" placeholder="Categoría" value="{{this.category}}" required>
                <button type="submit">Guardar</button>
                <button type="button" class="cancel-btn">Cancelar</button>
            </form>
        </li>
    {{/each}}
</ul>

<h2>Agregar Nuevo Producto</h2>
<form id="add-product-form">
    <input type="text" id="title" placeholder="Título" required>
    <input type="text" id="description" placeholder="Descripción" required>
    <input type="text" id="code" placeholder="Código" required>
    <input type="number" id="price" placeholder="Precio" required>
    <input type="number" id="stock" placeholder="Stock" required>
    <input type="text" id="category" placeholder="Categoría" required>
    <button type="submit">Agregar Producto</button>
</form>

<script>
    const socket = io();

    // Función para renderizar la lista de productos
    const renderProducts = (products) => {
        const productsList = document.getElementById('products-list');
        productsList.innerHTML = ''; // Limpiar la lista actual

        products.forEach(product => {
            const li = document.createElement('li');
            li.setAttribute('data-id', product.id);
            li.innerHTML = `
                <strong>${product.title}</strong> - ${product.description} - $${product.price}
                <button class="modify-btn">Modificar</button>
                <button class="delete-btn">Eliminar</button>
                
                <!-- Formulario de edición -->
                <form class="edit-form">
                    <input type="text" class="edit-title" placeholder="Título" value="${product.title}" required>
                    <input type="text" class="edit-description" placeholder="Descripción" value="${product.description}" required>
                    <input type="text" class="edit-code" placeholder="Código" value="${product.code}" required>
                    <input type="number" class="edit-price" placeholder="Precio" value="${product.price}" required>
                    <input type="number" class="edit-stock" placeholder="Stock" value="${product.stock}" required>
                    <input type="text" class="edit-category" placeholder="Categoría" value="${product.category}" required>
                    <button type="submit">Guardar</button>
                    <button type="button" class="cancel-btn">Cancelar</button>
                </form>
            `;
            productsList.appendChild(li);
        });
    };

    // Escuchar actualizaciones de productos
    socket.on('updateProducts', (products) => {
        renderProducts(products);
    });

    // Manejar el formulario de agregar producto
    const form = document.getElementById('add-product-form');
    form.addEventListener('submit', (e) => {
        e.preventDefault();
        const newProduct = {
            title: document.getElementById('title').value,
            description: document.getElementById('description').value,
            code: document.getElementById('code').value,
            price: parseFloat(document.getElementById('price').value),
            stock: parseInt(document.getElementById('stock').value),
            category: document.getElementById('category').value,
            thumbnails: []
        };
        socket.emit('newProduct', newProduct);
        form.reset();
    });

    // Delegación de eventos para "Eliminar", "Modificar" y "Cancelar"
    document.getElementById('products-list').addEventListener('click', (e) => {
        if(e.target && e.target.matches('button.delete-btn')) {
            const li = e.target.closest('li');
            const productId = li.getAttribute('data-id');
            socket.emit('deleteProduct', productId);
        }

        if(e.target && e.target.matches('button.modify-btn')) {
            const li = e.target.closest('li');
            const editForm = li.querySelector('.edit-form');
            editForm.style.display = 'block'; // Mostrar el formulario de edición
        }

        if(e.target && e.target.matches('button.cancel-btn')) {
            const li = e.target.closest('li');
            const editForm = li.querySelector('.edit-form');
            editForm.style.display = 'none'; // Ocultar el formulario de edición
        }
    });

    // Manejar el envío del formulario de edición
    document.getElementById('products-list').addEventListener('submit', (e) => {
        if(e.target && e.target.matches('.edit-form')) {
            e.preventDefault();
            const li = e.target.closest('li');
            const productId = li.getAttribute('data-id');

            const updatedProduct = {
                id: productId,
                title: li.querySelector('.edit-title').value,
                description: li.querySelector('.edit-description').value,
                code: li.querySelector('.edit-code').value,
                price: parseFloat(li.querySelector('.edit-price').value),
                stock: parseInt(li.querySelector('.edit-stock').value),
                category: li.querySelector('.edit-category').value,
                thumbnails: []
            };

            socket.emit('modifyProduct', updatedProduct);
            e.target.style.display = 'none'; // Ocultar el formulario después de enviar
        }
    });
</script>
